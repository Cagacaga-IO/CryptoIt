{"version":3,"sources":["../../src/api/index.js"],"names":["crypto","decryptandUncompress","filePath","outputPath","key","input","resolve","output","re","fileName","basename","isHex","test","existsSync","decryptData","decryptFileName","status","deleteFileAsync","console","log","encryptAndCompress","destFile","keepName","iterateFileName","cryptoFileName","encryptData"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS;AACPC,sBADO,gCACcC,QADd,EACwBC,UADxB,EACoCC,GADpC,EACyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE5CC,mBAF4C,GAEpC,eAAKC,OAAL,CAAaJ,QAAb,CAFoC;AAG5CK,oBAH4C,GAGnC,eAAKD,OAAL,CAAaH,UAAb,CAHmC;AAI5CK,gBAJ4C,GAIvC,iBAJuC;AAK5CC,sBAL4C,GAKjC,eAAKC,QAAL,CAAcL,KAAd,CALiC;AAM5CM,mBAN4C,GAMpCH,GAAGI,IAAH,CAAQH,QAAR,CANoC;;AAAA,mBAQ9C,aAAGI,UAAH,CAAcR,KAAd,CAR8C;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAS3B,cAAMS,WAAN,CACnBT,KADmB,EAEnBD,GAFmB,EAGnBG,MAHmB,EAInBI,QAAQ,cAAMI,eAAN,CAAsBN,QAAtB,EAAgCL,GAAhC,CAAR,GAA+CK,QAJ5B,CAT2B;;AAAA;AAS1CO,oBAT0C;AAAA;AAAA,qBAe1C,cAAMC,eAAN,CAAsBZ,KAAtB,CAf0C;;AAAA;AAAA,+CAgBzCW,MAhByC;;AAAA;AAAA,+CAkBzC,uBAlByC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqBlDE,sBAAQC,GAAR;;AArBkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBrD,GAxBY;AAyBPC,oBAzBO,8BAyBYlB,QAzBZ,EAyBsBC,UAzBtB,EAyBkCC,GAzBlC,EAyB0E;AAAA;;AAAA,QAAnCiB,QAAmC,uEAAxB,KAAwB;AAAA,QAAjBC,QAAiB,uEAAN,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7EjB,mBAF6E,GAErE,eAAKC,OAAL,CAAaJ,QAAb,CAFqE;AAG7EK,oBAH6E,GAGpE,eAAKD,OAAL,CAAaH,UAAb,CAHoE;AAI7EM,sBAJ6E,GAIlEa,WAAW,cAAMC,eAAN,CAAsBlB,KAAtB,CAAX,GAA0C,cAAMmB,cAAN,CAAqBnB,KAArB,EAA4BD,GAA5B,CAJwB;AAAA;AAAA,qBAK9D,cAAMqB,WAAN,CAAkBpB,KAAlB,EAAyBD,GAAzB,EAA8BG,MAA9B,EAAsCE,QAAtC,CAL8D;;AAAA;AAK7EO,oBAL6E;;AAAA,mBAM/EK,QAN+E;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAO3E,cAAMJ,eAAN,CAAsBZ,KAAtB,CAP2E;;AAAA;AAAA,gDAS5EW,MAT4E;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAatF;AAtCY,CAAf;;kBAyCehB,M","file":"index.js","sourcesContent":["import crypt from '../lib';\nimport path from 'path';\nimport fs from 'fs';\n\nconst crypto = {\n  async decryptandUncompress(filePath, outputPath, key) {\n    try {\n      const input = path.resolve(filePath);\n      const output = path.resolve(outputPath);\n      const re = /[0-9A-Fa-f]{6}/g;\n      const fileName = path.basename(input);\n      const isHex = re.test(fileName);\n\n      if (fs.existsSync(input)) {\n        const status = await crypt.decryptData(\n          input,\n          key,\n          output,\n          isHex ? crypt.decryptFileName(fileName, key) : fileName\n        );\n        await crypt.deleteFileAsync(input);\n        return status;\n      } else {\n        return 'File does not exists!';\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  async encryptAndCompress(filePath, outputPath, key, destFile = false, keepName = true) {\n    try {\n      const input = path.resolve(filePath);\n      const output = path.resolve(outputPath);\n      const fileName = keepName ? crypt.iterateFileName(input) : crypt.cryptoFileName(input, key);\n      const status = await crypt.encryptData(input, key, output, fileName);\n      if (destFile) {\n        await crypt.deleteFileAsync(input);\n      }\n      return status;\n    } catch (e) {\n      throw e;\n    }\n  }\n};\n\nexport default crypto;\n"]}