{"version":3,"sources":["../../src/lib/index.js"],"names":["cryptLib","encryptData","input","key","output","fileName","Promise","resolve","reject","password","Buffer","aes","createCipher","gzip","createGzip","rs","createReadStream","wr","createWriteStream","pipe","on","decryptData","aesDecrypt","createDecipher","unzip","createGunzip","e","cryptoFileName","filepath","basename","from","encrypt","toString","decryptFileName","hexData","decrypt","Utf8","deleteFileAsync","unlink","iterateFileName","file","num","filePath","isFileExists","existsSync","pathExculudesFile","pathWitoutFile","extention","extname","newFileName","createNewFileName","baseName","split","baseNameWitoutCrypt","regex","test","filter","item","join"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { promisify } from 'util';\nimport zlib from 'zlib';\nimport { AES, enc } from 'crypto-js';\n\nconst cryptLib = {\n  encryptData(input, key, output, fileName) {\n    return new Promise((resolve, reject) => {\n      const password = new Buffer(key);\n      const aes = crypto.createCipher('aes-256-cbc', password);\n      const gzip = zlib.createGzip();\n      const rs = fs.createReadStream(input);\n      const wr = fs.createWriteStream(`${output}/${fileName}`);\n      rs\n        .pipe(aes)\n        .pipe(gzip)\n        .pipe(wr)\n        .on('finish', () => resolve('Encrypted'))\n        .on('error', reject);\n    });\n  },\n  decryptData(input, key, output, fileName) {\n    return new Promise((resolve, reject) => {\n      const password = new Buffer(key);\n      const aesDecrypt = crypto.createDecipher('aes-256-cbc', password);\n      const rs = fs.createReadStream(input);\n      const wr = fs.createWriteStream(`${output}/${fileName}`);\n      const unzip = zlib.createGunzip();\n      rs\n        .pipe(unzip)\n        .pipe(aesDecrypt)\n        .pipe(wr)\n        .on('finish', () => resolve('Decrypted'))\n        .on('error', (e) => reject(e));\n    });\n  },\n  cryptoFileName(filepath, key) {\n    const fileName = path.basename(filepath);\n    return Buffer.from(AES.encrypt(fileName, key).toString(), 'ascii').toString('hex');\n  },\n  decryptFileName(hexData, key) {\n    return AES.decrypt(Buffer.from(hexData, 'hex').toString('ascii'), key).toString(enc.Utf8);\n  },\n  deleteFileAsync: promisify(fs.unlink),\n\n  //Following functions are for recursive fileNaming\n  iterateFileName(file, num = 0) {\n    const filePath = path.resolve(file);\n    const fileName = path.basename(file);\n    const isFileExists = fs.existsSync(filePath);\n    const pathExculudesFile = this.pathWitoutFile(filePath, fileName);\n    if (isFileExists) {\n      const extention = path.extname(fileName);\n      if (extention) {\n        const newFileName = `${this.createNewFileName(fileName, extention, num)}${extention}`;\n        return this.iterateFileName(`${pathExculudesFile}/${newFileName}`, (num += 1));\n      } else {\n        const newFileName = this.createNewFileName(fileName, null, num);\n        return this.iterateFileName(`${pathExculudesFile}/${newFileName}`, (num += 1));\n      }\n    } else {\n      return fileName;\n    }\n  },\n\n  /// HELPERS\n  createNewFileName(fileName, extention, num) {\n    if (extention) {\n      const baseName = fileName.split(extention)[0];\n      return `${this.baseNameWitoutCrypt(baseName)}crypted${num === 0 ? '' : num}`;\n    } else {\n      return `${this.baseNameWitoutCrypt(fileName)}crypted${num === 0 ? '' : num}`;\n    }\n  },\n\n  baseNameWitoutCrypt(file) {\n    const regex = /crypted/;\n    if (regex.test(file)) return file.split(regex)[0];\n    return file;\n  },\n\n  pathWitoutFile(filePath, fileName) {\n    return filePath\n      .split('/')\n      .filter((item) => item !== fileName)\n      .join('/');\n  }\n};\n\nexport default cryptLib;\n"]}