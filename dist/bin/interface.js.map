{"version":3,"sources":["../../src/bin/interface.js"],"names":["header","console","log","rainbow","textSync","font","horizontalLayout","verticalLayout","command","option","action","file","optional","input","resolve","process","cwd","output","outputDestination","encryptAndCompress","key","destroyOrginal","undefined","encryptFileName","status","options","decryptandUncompress","green","on","red","yellow","parse","argv"],"mappings":"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","file":"interface.js","sourcesContent":["\n\nimport colors from 'colors';\nimport figlet from 'figlet';\nimport program from 'commander';\nimport path from 'path';\nimport crypto from '../api';\n\nfunction header() {\n  console.log(\n    colors.rainbow(\n      figlet.textSync('Crypto It', {\n        font: 'Ghost',\n        horizontalLayout: 'default',\n        verticalLayout: 'default'\n      })\n    )\n  );\n}\n\nheader();\n\nprogram\n  .command('encrypt <file>')\n  .option('-O, --output-destination <output>', 'Output Destionation')\n  .option('-K, --key <key>', 'Your Key')\n  .option('-E, --encrypt-file-name', 'Encrypt File Name')\n  .option('-D, --destroy-orginal', 'Deletes the orginal file')\n  .action(async (file, optional) => {\n    const input = path.resolve(process.cwd(), file);\n    const output = path.resolve(process.cwd(), optional.outputDestination);\n    const status = await crypto.encryptAndCompress(\n      input,\n      output,\n      optional.key,\n      optional.destroyOrginal === undefined ? false : true,\n      optional.encryptFileName === undefined ? false : true\n    );\n    if (status === 'Encrypted') {\n      console.log('File has been encrypted, go and play safe'.rainbow);\n    }\n  });\n\nprogram\n  .command('decrypt <file>')\n  .option('-O, --output-destination <output>', 'Output Destionation')\n  .option('-K, --key <key>', 'Your Key')\n  .action(async (file, options) => {\n    const input = path.resolve(process.cwd(), file);\n    const output = path.resolve(process.cwd(), options.outputDestination);\n    const status = await crypto.decryptandUncompress(\n      input,\n      output,\n      options.key\n    );\n    if (status === 'Decrypted') {\n      console.log('File has been decrypted, cool yea?'.rainbow);\n    }\n    if (status === 'File does not exists!') {\n      console.log('File does not exists please check'.green);\n    }\n  });\n\nprogram.on('--help', function() {\n  console.log('');\n  console.log('');\n  console.log('  Options for encrypt:'.red);\n  console.log('');\n  console.log('  Usage:'.yellow);\n  console.log('');\n  console.log(\n    '   cryptoIt encrypt [file] -K [your key] -O [outputDest] [options]'.green\n  );\n  console.log('');\n  console.log('    -K --key [required]');\n  console.log('    -O --output-destination [required]');\n  console.log('    -D --destroy-orginal [optional]: destroys orginal file');\n  console.log(\n    '    -E --dont-encrypt-file-name [optional]: does not encrypt the file name'\n  );\n  console.log('');\n  console.log('');\n  console.log('  Options for decrypt:'.red);\n  console.log('');\n  console.log('  Usage:'.yellow);\n  console.log('');\n  console.log(\n    '   cryptoIt decrypt [file] -K [your key] -O [outputDest] [options]'.green\n  );\n  console.log('');\n\n  console.log('    -K --key [required]');\n  console.log('    -O --output-destination [required]');\n\n  console.log('');\n});\n\nprogram.parse(process.argv);\n"]}